.. _AbstractImageIOModule:

.. currentmodule:: mocha.mediaio


AbstractImageIOModule
*********************

.. inheritance-diagram:: mocha.mediaio.AbstractImageIOModule
    :parts: 2


Detailed Description
--------------------

.. _More:

    Abstract image IO class that provides overridable methods to determine custom
    image input and output operations. Every overridable method must be implemented.
    The methods should not call each other.


.. class:: AbstractImageIOModule()








.. class:: AbstractImageIOModule(format_name, extensions, save_image_formats, save_image_types[, is_clip_loader=false])


    :type format_name: str
    :type extensions: list of strings
    :type save_image_formats: list of PixelFormat
    :type save_image_types: list of ChannelType
    :type is_clip_loader: bool


    :param format_name: Short description of custom format, e.g. "Maya Image Format".
    :param extensions: List of supported extensions, e.g. ['.iff'].
    :param save_image_formats: List of supported :class:`PixelFormat` to persist.
    :param save_image_types: List of supported :class:`ChannelType` to persist.
    :param is_clip_loader: True if the loader returns multiple frames from a single file (such as with .MOV or .AVI).
    
    Creates and registers custom image IO module. Create its instance in custom
    Python bootstrapping code to obtain appropriate image format in mocha backend.






.. method:: AbstractImageIOModule.accepts_ext(extension)


    :type extension: str
    :rtype: bool


    :param ext_no_dot: File name suffix (extension) of the image file, with no leading dot.
    
    Implements checking whether given file type is acceptable by the module.



.. method:: AbstractImageIOModule.accepts_file(file_name)


    :type file_name: str
    :rtype: bool


    :param file_name: Absolute path to an image file.
    
    Implements checking whether image file is acceptable by the module.
    Being called upon project opening.



.. method:: AbstractImageIOModule.channel_type(file_name)


    :type file_name: str
    :rtype: :any:`ChannelType`


    :param file_name: Absolute path to an image file.
    
    Implements channel type getting for given file.

    :param file_name: Absolute path to an image file.
    
    Implements channel type getting for given file.



.. method:: AbstractImageIOModule.get_fps(path)


    :type path: str
    :rtype: float


    :param path: Absolute path to the clip file.
    
    Implements determining the frame rate of a source clip.



.. method:: AbstractImageIOModule.get_frame_count(path)


    :type path: str
    :rtype: float


    :param path: Absolute path to the clip file.
    
    Implements determining the number of frames in the given clip.



.. method:: AbstractImageIOModule.get_gamma(file_name)


    :type file_name: str
    :rtype: :any:`OptionalFloat`


    :param file_name: Absolute path to an image file.
    
    Implements gamma value getting. Return None if the module does not support this.



.. method:: AbstractImageIOModule.get_interlace_mode(file_name)


    :type file_name: str
    :rtype: :any:`InterlaceMode or None`


    :param file_name: Absolute path to an image file.
    
    Implements interlace mode getting. Return None if the module does not support this.



.. method:: AbstractImageIOModule.get_metadata(path, frame_number, stream_name)


    :type path: str
    :type frame_number: int
    :type stream_name: str
    :rtype: Dictionary with keys of type QString and values of type QVariant.


    :param path: Absolute path to the clip file.
    :param frame_number: Frame number to load.
    :param stream_name: Name of the stream to load.
    
    Return a dictionary containing additional metadata for the given
    frame and stream, if there is any. The default implementation is to
    return an empty dictionary.



.. method:: AbstractImageIOModule.get_stream_names(path)


    :type path: str
    :rtype: list of QString


    :param path: Absolute path to the clip file.
    
    Return a list of available stream names for this clip. These stream
    names will be passed back as a parameter to load_image to load the
    respective image from a particular stream. If the clip does not
    contain multiple streams, an empty list can be returned as per the
    default implementation.



.. method:: AbstractImageIOModule.image_size(file_name)


    :type file_name: str
    :rtype: :any:`QSize`


    :param file_name: Absolute path to an image file.
    
    Implements image size getting.



.. method:: AbstractImageIOModule.load_image(image, path, frame_number, stream_name)


    :type image: :any:`ImageData`
    :type path: str
    :type frame_number: int
    :type stream_name: str


    :param image: Empty image instance to fill in.
     :param path: Absolute path to an image file.
     :param frame_number: Number of the frame to load (only relevant for multi-frame clips)
     :param stream_name: Name of the stream name to load (only relevant for multi-stream files like OpenEXR)
    
     Implements image loading. Set ``pixels`` property
     for given ``image`` instance as appropriate python ``array`` object
     (see docs of built-in python ``array`` module).
    
    **Important**: loaded images should be vertically flipped.



.. method:: AbstractImageIOModule.pixel_format(file_name)


    :type file_name: str
    :rtype: :any:`PixelFormat`


    :param file_name: Absolute path to an image file.
    
    Implements checking whether given file extension is acceptable by the module.



.. method:: AbstractImageIOModule.save_image(image, path)


    :type image: :any:`ImageData`
    :type path: str


    :param image: Complete image instance.
    :param path: Absolute path to an image file to save.
    
    Implements image saving.
    
    **Important**: mocha presents vertically flipped images only.



.. method:: AbstractImageIOModule.supports_image(file_name, format, pixels_type)


    :type file_name: str
    :type format: :any:`PixelFormat`
    :type pixels_type: :any:`ChannelType`
    :rtype: bool


    :param file_name: Absolute path to an image file.
    :param format: Image format.
    :param pixels_type: Pixels type.
    
    Implements checking whether the module supports image persisting with given
    path, image format and pixels type.




